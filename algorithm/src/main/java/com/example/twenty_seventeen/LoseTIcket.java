package com.example.twenty_seventeen;

/**
 * 去哪儿
 * Created by Wilber on 11/10/2017.
 * 一张机票的价格是由多个因素决定的，它通常与飞行距离没有直接的关系。许多旅行者于是在这方面变得非常有创意，
 * 当飞机在多个城市停靠时，只是用机票的一部分，以实现低花费的旅行。例如：北京到温哥华的机票可能卖8000元人民币，
 * 但是，北京-温哥华-西雅图的机票可能卖7500元，如果用户的目的地是温哥华，那么用户会选择买北京-温哥华-西雅图的机票，
 * 当他乘坐完北京-温哥华的航段后，会放弃乘坐温哥华到西雅图的航段。然而，航空公司也了解这种行为，并通常要求一张机票所包含的站点必须要按顺序旅行，
 * 而且不允许中途加入其他路线。例如：你手中有一张从北京到温哥华然后再到西雅图的机票，你不能仅使用机票中温哥华到西雅图的部分，
 * 你必须从机票上的第一个城市北京出发；此外，也不允许你从城市北京到城市温哥华，然后去一些其他地方如多伦多并返回温哥华，再继续你从温哥华到西雅图的旅途。
 * 给出一组优惠的机票，以及一条或多条旅游路线，你要确定为了使旅行费用最少，应该如何购买机票。
 * 现假设：优惠机票航线不多于10条，每组优惠机票的测试用例旅行路线不多于10条，每张机票的航段数不多于5个，每个优惠航线票价不高于10000元
 *
 * @ 输入
 * 包含一组测试用例，测试用例中描述一组优惠机票和一组旅行路线
 * 每组测试用例由4部分组成：
 * 第1行为优惠机票航线有多少条（n）
 * 第2行~第2+n-1行描述优惠机票编号，每张优惠机票的价格、航段数和航段顺序
 * 第2+n行描述了测试用例的旅行路线
 * @ 输出
 * 对于每条旅行路线，输出两行，包括测试用例编号、路线编号、路线的最小花费；
 * 然后按使用顺序输出本次旅行所使用的机票编号，具体输出格式见样例，保证答案唯一。
 * 如果输入参数不合法，则返回Error。
 */

public class LoseTIcket {
}
